"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3577],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>m});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(o),m=n,w=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return o?r.createElement(w,i(i({ref:t},c),{},{components:o})):r.createElement(w,i({ref:t},c))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var d=2;d<a;d++)i[d]=o[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},6090:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=o(7462),n=(o(7294),o(3905));const a={id:"ota",title:"ota",hide_title:!0,sidebar_label:"ota",description:"Download OTAs",last_update:{date:new Date("2022-11-24T20:58:11.000Z"),author:"blacktop"}},i=void 0,l={unversionedId:"cli/ipsw/download/ota",id:"cli/ipsw/download/ota",title:"ota",description:"Download OTAs",source:"@site/docs/cli/ipsw/download/ota.md",sourceDirName:"cli/ipsw/download",slug:"/cli/ipsw/download/ota",permalink:"/ipsw/docs/cli/ipsw/download/ota",draft:!1,editUrl:"https://github.com/blacktop/ipsw/tree/master/www/docs/cli/ipsw/download/ota.md",tags:[],version:"current",frontMatter:{id:"ota",title:"ota",hide_title:!0,sidebar_label:"ota",description:"Download OTAs",last_update:{date:"2022-11-24T20:58:11.000Z",author:"blacktop"}},sidebar:"cli",previous:{title:"macos",permalink:"/ipsw/docs/cli/ipsw/download/macos"},next:{title:"rss",permalink:"/ipsw/docs/cli/ipsw/download/rss"}},s={},d=[{value:"ipsw download ota",id:"ipsw-download-ota",level:2},{value:"Examples",id:"examples",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],c={toc:d};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"ipsw-download-ota"},"ipsw download ota"),(0,n.kt)("p",null,"Download OTAs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ipsw download ota [options] [flags]\n")),(0,n.kt)("h3",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u276f ipsw download ota --version 14.8.1 --device iPhone10,1\n\n    ? You are about to download 1 OTA files. Continue? Yes\n       \u2022 Getting OTA               build=18H107 device=iPhone10,1 version=iOS1481Short\n        280.0 MiB / 3.7 GiB [===>------------------------------------------------------| 51m18s\n")),(0,n.kt)("h3",{id:"options"},"Options"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"      --beta                    Download Beta OTAs\n      --driver-kit              Extract DriverKit dyld_shared_cache(s) from remote OTA zip\n      --dyld                    Extract dyld_shared_cache(s) from remote OTA zip\n  -a, --dyld-arch stringArray   dyld_shared_cache architecture(s) to remote extract\n  -f, --flat                    Do NOT perserve directory structure when downloading with --pattern\n  -h, --help                    help for ota\n      --info                    Show all the latest OTAs available\n      --info-type string        OS type to show OTAs for\n  -j, --json                    Dump URLs as JSON only\n  -k, --kernel                  Extract kernelcache from remote OTA zip\n  -o, --output string           Folder to download files to\n      --pattern string          Download remote files that match regex\n  -p, --platform string         Platform to download (ios, watchos, tvos, audioos || accessory, macos, recovery)\n      --rsr                     Download Rapid Security Response OTAs\n  -u, --urls                    Dump URLs only\n")),(0,n.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"      --black-list stringArray   iOS device black list\n  -b, --build string             iOS BuildID (i.e. 16F203)\n      --color                    colorize output\n      --config string            config file (default is $HOME/.ipsw.yaml)\n  -y, --confirm                  do not prompt user for confirmation\n  -d, --device string            iOS Device (i.e. iPhone11,2)\n      --insecure                 do not verify ssl certs\n  -m, --model string             iOS Model (i.e. D321AP)\n      --proxy string             HTTP/HTTPS proxy\n  -_, --remove-commas            replace commas in IPSW filename with underscores\n      --restart-all              always restart resumable IPSWs\n      --resume-all               always resume resumable IPSWs\n      --skip-all                 always skip resumable IPSWs\n  -V, --verbose                  verbose output\n  -v, --version string           iOS Version (i.e. 12.3.1)\n      --white-list stringArray   iOS device white list\n")),(0,n.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/cli/ipsw/download"},"ipsw download"),"\t - Download Apple Firmware files (and more)")))}p.isMDXComponent=!0}}]);