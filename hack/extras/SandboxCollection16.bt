//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: SandboxCollection16.bt
//   Authors: blacktop
//   Version: 1.0
//   Purpose: iOS 16.x Sandbox Profile Collection
//  Category: Operating System
// File Mask:
//  ID Bytes: 00 80, 00 00, 00 40
//   History:
//   1.1  2022-07-30 blacktop: Add more fields etc CREDIT to github.com/0xalsr for sharing knowleddge
//   1.0  2022-07-25 blacktop: Add support for iOS16.x and process more fields
//------------------------------------------------

local int64 baseOffset = 0;

typedef struct {
    uint16 Type<format = hex>;
    uint16 OpNodeCount<format = hex>;
    uchar  OpCount<format = decimal>;
    uchar  GlobalVarCount<format = decimal>;
    uchar  unknown1<format = decimal>;
    uchar  unknown2<format = decimal>;
    uint16 ProfileCount<format = decimal>;
    uint16 RegexCount<format = decimal>;
    uint16 PolicyCount<format = decimal>;
    uint16 unknown3<format = decimal>;
} CollectionHeader;

typedef struct {
    uint16 NameOffset<format = hex>;
    uint16 Flags<format = hex>;
    uint16 PolicyIndex<format = hex>;
    uint16 OpCount[header.OpCount]<format = hex>;
} Profile<read = readProfile, bgcolor = cLtGray>;

string readProfile(Profile &info)
{
    return ReadString(baseOffset+info.NameOffset*8+2);
}

typedef struct {
    uint16 offset<format = hex>;
} Global<read = readGlobal, bgcolor = cLtPurple>;

string readGlobal(Global &g)
{
    return ReadString(baseOffset+g.offset*8+2);
}

typedef struct {
    uint16 offset<format = hex>;
} Policy<read = readPolicy, bgcolor = cLtAqua>;

string readPolicy(Policy &p)
{
    return ReadString(baseOffset+p.offset*8+2);
}

typedef struct {
    uint16 offset<format = hex>;
} Unknown1<read = readUnknown1, bgcolor = cLtRed>;

string readUnknown1(Unknown1 &u)
{
    return ReadString(baseOffset+u.offset*8+2);
}

typedef struct {
    uchar id;
    uchar policyFilter<format = hex>;
    uint16 arg<format = hex>;
} Modifier;

typedef struct {
    uchar type<format = hex>;
    if ( (type & 1) == 0 ) {
        uchar filter<format = hex>;
        uint16 arg<format = hex>;
        uint16 match<format = hex>;
        uint16 unmatch<format = hex>;
    } else {
        uint16 actions<format = hex>;
        uchar modifierFlags<format = hex>;
        if ( (modifierFlags & 0x80) != 0 ) {
            Modifier inlineModifier;
        } else {
            uchar modifierCount<format = hex>;
            uchar unk2<format = decimal>;
            uint16 modifiersOffset<format = hex>;
        }
    }
} OpNode;

typedef struct {
    if ( header.OpNodeCount > 0 ) {
        local quad opNodeStart = sizeof(header) + (header.RegexCount*sizeof(uint16)) + (header.GlobalVarCount*sizeof(uint16)) + (header.PolicyCount*sizeof(uint16)) + (header.unknown1*sizeof(uint16)) + (header.unknown3*sizeof(uint16));
        if ( header.Type == 0x8000 ) {
            if ( header.ProfileCount > 0 )
                opNodeStart += header.ProfileCount * sizeof(profiles[0]);
        } else if ( header.Type == 0x0000 || header.Type == 0x4000 ) {
            opNodeStart += (header.OpCount*2);
        }
        if ( (opNodeStart & 6) != 0 )
            uchar opNodeAlignmentPadding[8 - (opNodeStart & 6)];
        OpNode opNodes[header.OpNodeCount]<optimize=false>;
    }
} OpNodes;

typedef uint16 offset;

typedef struct {
    CollectionHeader header;
    if ( header.RegexCount > 0 )
        offset regexOffset[header.RegexCount]<format = hex, bgcolor = cLtBlue>;
    if ( header.GlobalVarCount > 0 )
        Global globalsOffsets[header.GlobalVarCount];
    if ( header.PolicyCount > 0 )
        Policy policyOffsets[header.PolicyCount];
    if ( header.unknown1 > 0 )
        Unknown1 entitlements[header.unknown1];
    if ( header.unknown3 > 0 )
        offset unknown_iOS16[header.unknown3]<format = hex, bgcolor = cLtGreen>;
    if ( header.Type == 0x8000 ) {
        if ( header.ProfileCount > 0 )
            Profile profiles[header.ProfileCount]<optimize=true, format = hex>;
    } else if ( header.Type == 0x0000 || header.Type == 0x4000 ) {
        uint16 ops[header.OpCount];
    }
    OpNodes opNodes<optimize=false, bgcolor = cLtYellow>;
    baseOffset = FTell();
    Printf("baseOffset: %#x\n", baseOffset);
    uchar data[FileSize() - FTell()];
} Collection;

LittleEndian();

Collection collection;
